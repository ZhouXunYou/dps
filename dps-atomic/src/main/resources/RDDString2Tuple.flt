package ${packagePath}
import scala.collection.mutable.Map
import org.apache.spark.rdd.RDD
import org.apache.spark.SparkContext
import dps.atomic.impl.AbstractAction

class ${className}(override val sparkContext:SparkContext,override val inputVariableKey: String, override val outputVariableKey: String, override val variables: Map[String, Any]) extends AbstractAction(sparkContext,inputVariableKey, outputVariableKey, variables) with Serializable {
  def doIt(params: Map[String, String]): Any = {
    val rdd = this.pendingData.asInstanceOf[RDD[String]]
    val result = rdd.map(line => {
      processStringLine(line)
    })
    this.variables.put(outputVariableKey, result);
  }
  private def processStringLine(line: String): Tuple2[String,String] = {
    ${sourceCode}
  }
}