package ${packagePath}

import dps.atomic.impl.AbstractAction
import dps.atomic.define.{AtomOperationDefine, AtomOperationParamDefine}

import scala.collection.mutable.Map

import org.apache.spark.SparkConf
import org.apache.spark.sql.Dataset
import org.apache.spark.sql.Row
import org.apache.spark.sql.SparkSession

class ${className} (override val sparkSession: SparkSession, override val sparkConf:SparkConf,override val inputVariableKey: String, override val outputVariableKey: String, override val variables: Map[String, Any]) extends AbstractAction(sparkSession, sparkConf,inputVariableKey, outputVariableKey, variables) with Serializable {
  def doIt(params: Map[String, String]): Any = {
    val leftDataset = params.get("leftVariableKey").get.asInstanceOf[Dataset[Row]]
    val rightDataset = params.get("rightVariableKey").get.asInstanceOf[Dataset[Row]]
    
    val datasetJoin = leftDataset.join(rightDataset, params.get("colum").get)
    datasetJoin.createOrReplaceTempView(params.get("viewName").get)
    this.variables.put(outputVariableKey, datasetJoin);
  }
}