package ${packagePath}

import dps.atomic.impl.AbstractAction
import dps.atomic.define.{AtomOperationDefine, AtomOperationParamDefine}
import org.apache.spark.sql.{Dataset, Row, SaveMode, SparkSession}

import scala.collection.mutable.Map
import org.apache.spark.SparkConf

class ${className} (override val sparkSession: SparkSession, override val sparkConf:SparkConf,override val inputVariableKey: String, override val outputVariableKey: String, override val variables: Map[String, Any]) extends AbstractAction(sparkSession, sparkConf,inputVariableKey, outputVariableKey, variables) with Serializable {
  
  val logger = Logger(this.getClass)
  
  def doIt(params: Map[String, String]): Any = {
    val dataset = this.pendingData.asInstanceOf[Dataset[Row]]
    if (dataset != null && dataset.isEmpty) {
      logger.info("无数据,跳过存储操作")
    } else {
      val partitionNum = params.get("partitionNum").getOrElse(sparkSession.sparkContext.defaultMinPartitions.toString()).toInt
      val modeParam = params.getOrElse("saveMode", "1").toInt
      val path = params.get("path").get
      val repairTables = params.getOrElse("repairTables", "").toString
      val partitionFields = params.getOrElse("partitionFields", "").toString
      var saveMode: SaveMode = SaveMode.Append
      if (params.getOrElse("saveMode", "1").toInt.equals(2)) {
        saveMode = SaveMode.Overwrite
      }

      if (!partitionFields.isEmpty()) {
        var partitions = "";
        val fields = partitionFields.split(",").toList
        for (f <- fields) {
          partitions = partitions.+(f).+(",")
        }
        partitions = partitions.substring(0, partitions.length() - 1)
        dataset.repartition(partitionNum.toInt).write.mode(saveMode).partitionBy(partitions).parquet(path)
      } else {
        dataset.repartition(partitionNum.toInt).write.mode(saveMode).parquet(path)
      }

      if (!repairTables.isEmpty()) {
        repairTables.split(",").foreach(f => {
          sparkSession.sqlContext.sql("MSCK REPAIR TABLE ".+(f));
        })
      }
    }
  }
}