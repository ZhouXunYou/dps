package ${packagePath}

import dps.atomic.Operator
import dps.datasource.define.{DatasourceDefine, DatasourceParamDefine}
import org.apache.kafka.common.serialization.StringDeserializer
import org.apache.spark.SparkConf
import org.apache.spark.rdd.RDD
import org.apache.spark.sql.SparkSession
//import org.apache.spark.streaming.kafka010.ConsumerStrategies.Subscribe
//import org.apache.spark.streaming.kafka010.KafkaUtils
//import org.apache.spark.streaming.kafka010.LocationStrategies.PreferConsistent

import scala.collection.mutable.Map
import org.apache.spark.SparkConf
import java.util.ArrayList
import com.alibaba.fastjson.JSON

class ${className}(override val sparkSession: SparkSession, override val sparkConf:SparkConf,override val inputVariableKey: String, override val outputVariableKey: String, override val variables: Map[String, Any]) extends dps.atomic.impl.AbstractAction(sparkSession, sparkConf,inputVariableKey, outputVariableKey, variables) with Serializable {
  
  def doIt(params: Map[String, String]): Any = {
  	val topicName = params.get("topicName").get
  	
    val topicValue = this.pendingData.asInstanceOf[RDD[Tuple3[String, Int, String]]].filter(tuple=>{
      tuple._1.equals(topicName)
    })
    val rdd = topicValue.map(tuple=>{
      tuple._3
    })
    variables.put(outputVariableKey, rdd.distinct())
    var topicNames:ArrayList[String] = variables.get("topicNames").getOrElse(null).asInstanceOf[ArrayList[String]]
    if(topicNames==null){
      topicNames = new ArrayList[String]
      
    }
    topicNames.add(topicName)
    variables.put("topicNames", topicNames)
  }
}