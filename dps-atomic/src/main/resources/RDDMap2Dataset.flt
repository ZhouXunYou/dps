package ${packagePath}

import dps.atomic.define.{AtomOperationDefine, AtomOperationParamDefine}
import org.apache.spark.rdd.RDD
import org.apache.spark.sql.types.{StructField, StructType}
import org.apache.spark.sql.{Row, RowFactory, SparkSession}

import scala.collection.mutable.Map

class ${className}(override val sparkSession: SparkSession,override val inputVariableKey: String, override val outputVariableKey: String, override val variables: Map[String, Any]) extends AbstractAction(sparkSession,inputVariableKey, outputVariableKey, variables) with Serializable {
  def doIt(params: Map[String, String]): Any = {
    val viewName = params.get("viewName").get
    val rdd = this.pendingData.asInstanceOf[RDD[Map[String,Any]]]
    val result = rdd.map(map => {
      buildRow(map)
    })
    var schema = StructType(specifyTableFields())
    val dataframe = sparkSession.sqlContext.createDataFrame(result, schema)
    dataframe.createOrReplaceTempView(viewName)
    this.variables.put(outputVariableKey, dataframe);
  }
  
  private def specifyTableFields(): List[StructField] = {
    ${buildTableFieldCode}
  }
  
  private def buildRow(map: Map[String,Any]): Row = {
    ${buildTableRowCode}
  }
}